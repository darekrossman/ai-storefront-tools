---
description: 
globs: 
alwaysApply: true
---
# UI Patterns and HTML Semantics

## Link and Button Usage Rules

### ❌ Never Do This
- **Never nest interactive elements**: Do not wrap `<button>` or `<Button>` elements with `<Link>` components
- **Never nest button components in links**: Do not wrap `<Link>` components with `<button>` or `<Button>` elements
- **Avoid double interactivity**: Do not create nested clickable/interactive elements

### ✅ Correct Patterns

#### For Navigation Links (Button-styled)
```jsx
// Good: Link component styled as button using button recipe
import Link from 'next/link'
import { button } from '@/components/ui/button'

<Link href="/dashboard/projects/new" className={button()}>
  Create New Project
</Link>

// Good: Link with button variant styling
<Link href="/dashboard/projects/new" className={button({ variant: 'secondary' })}>
  Create New Project
</Link>

// Good: Link with danger variant
<Link href="/delete" className={button({ variant: 'danger' })}>
  Delete Project
</Link>
```

#### For Form Actions and Interactive Buttons
```jsx
// Good: Button component for form actions
import { Button } from '@/components/ui/button'

<Button type="submit">
  Submit Form
</Button>

// Good: Button with variant for different actions
<Button variant="secondary" onClick={handleCancel}>
  Cancel
</Button>

<Button variant="danger" onClick={handleDelete}>
  Delete
</Button>

// Good: Button with onClick handler for navigation
<Button onClick={() => router.push('/dashboard/projects/new')}>
  Navigate
</Button>
```

#### For Card Navigation
```jsx
// Good: Entire card as link 
import Link from 'next/link'
import { button } from '@/components/ui/button'

<Link href={`/dashboard/projects/${project.id}`}>
  <styled.div
    bg="white"
    border="1px solid"
    borderColor="gray.200"
    borderRadius="lg"
    p={6}
    cursor="pointer"
    _hover={{ borderColor: "gray.300", shadow: "sm" }}
  >
    <h3>{project.name}</h3>
    <p>{project.description}</p>
  </styled.div>
</Link>

// Good: Card with separate action buttons
<styled.div bg="white" border="1px solid" borderColor="gray.200">
  <h3>{project.name}</h3>
  <p>{project.description}</p>
  <Flex gap={2}>
    <Link href={`/dashboard/projects/${project.id}`} className={button({ variant: 'secondary', size: 'sm' })}>
      View
    </Link>
    <Button variant="primary" onClick={handleEdit}>Edit</Button>
  </Flex>
</styled.div>
```

## React 19 Form Patterns

### Use Modern Form State Management
Always use React 19's `useActionState` hook for form state management instead of URL parameters or client-side state for errors and messages.

**Reference**: [React 19 useActionState Documentation](mdc:https:/react.dev/reference/react/useActionState)

### ✅ Correct React 19 Form Pattern

#### Server Actions Structure
```tsx
// actions.ts
'use server'

export type FormState = {
  error?: string
  message?: string
  success?: boolean
}

export async function submitForm(prevState: FormState, formData: FormData): Promise<FormState> {
  // Validation
  const field = formData.get('field') as string
  if (!field) {
    return { error: 'Field is required' }
  }

  try {
    // Process form
    await processData(field)
    return { message: 'Success!', success: true }
  } catch (error) {
    return { error: 'Something went wrong' }
  }
}
```

#### Client Component with useActionState
```tsx
// form-component.tsx
'use client'

import { useActionState } from 'react'
import { Button } from '@/components/ui/button'
import { submitForm, type FormState } from './actions'

export default function FormComponent() {
  const [state, formAction, isPending] = useActionState(submitForm, {})

  return (
    <form action={formAction}>
      {/* Error Display */}
      {state.error && (
        <styled.div bg="red.50" borderColor="red.200" p={4}>
          {state.error}
        </styled.div>
      )}

      {/* Success Message */}
      {state.message && (
        <styled.div bg="green.50" borderColor="green.200" p={4}>
          {state.message}
        </styled.div>
      )}

      <styled.input
        name="field"
        required
        disabled={isPending}
      />

      <Button
        type="submit"
        disabled={isPending}
        variant={isPending ? 'secondary' : 'primary'}
      >
        {isPending ? 'Loading...' : 'Submit'}
      </Button>
    </form>
  )
}
```

#### Server Component Integration
```tsx
// page.tsx (Server Component)
import FormComponent from './form-component'

export default function Page() {
  return (
    <main>
      <h1>Form Page</h1>
      <FormComponent />
    </main>
  )
}
```

### ❌ Avoid Legacy Patterns

```tsx
// ❌ Bad: Using URL parameters for form state
const searchParams = useSearchParams()
const error = searchParams.get('error')

// ❌ Bad: Server actions that redirect with error params
export async function badAction(formData: FormData) {
  if (error) {
    redirect('/form?error=Something went wrong')
  }
}

// ❌ Bad: Client-side form state without useActionState
const [error, setError] = useState('')
const [loading, setLoading] = useState(false)
```

### Form Architecture Best Practices

1. **Separation of Concerns**:
   - Server components for layout and static content
   - Client components for interactive forms using `useActionState`
   - Server actions for form processing

2. **Type Safety**:
   - Define clear state types for form responses
   - Use TypeScript for server actions and form state

3. **Progressive Enhancement**:
   - Forms work without JavaScript when using server actions
   - `useActionState` enhances with loading states and better UX

4. **Error Handling**:
   - Return structured error objects from server actions
   - Display errors in the UI, not URL parameters
   - Handle both validation and server errors gracefully

5. **Loading States**:
   - Use `isPending` from `useActionState` for loading indicators
   - Disable form inputs during submission
   - Provide clear feedback to users

## HTML Semantics Rules

### Interactive Elements
- Use `<button>` for actions (forms, modals, toggles)
- Use `<Link>` or `<a>` for navigation between pages
- Use `<input type="submit">` or `<button type="submit">` for form submission
- Never nest interactive elements (buttons inside links, etc.)

### Accessibility
- Ensure proper ARIA labels for interactive elements
- Maintain keyboard navigation support
- Use semantic HTML elements (`<nav>`, `<main>`, `<section>`, etc.)

### PandaCSS Styling
- **Always use the `Button` component** from `@/components/ui/button` for action buttons
- **Always use the `button` recipe** from `@/components/ui/button` with `className={button()}` for Links that need button styling
- Use button variants (`primary`, `secondary`, `danger`) for appropriate styling
- Use `styled.div` or other non-interactive elements for containers
- Apply consistent design tokens for colors, spacing, and typography

## Button Component Usage Guidelines

### Import Patterns
```tsx
// For buttons (form actions, onClick handlers)
import { Button } from '@/components/ui/button'

// For links styled as buttons
import Link from 'next/link'
import { button } from '@/components/ui/button'
```

### Button Variants
- `primary` (default): Main call-to-action buttons
- `secondary`: Secondary actions, cancel buttons
- `danger`: Destructive actions like delete

### Examples
```tsx
// Form submission
<Button type="submit">Save Changes</Button>

// Secondary action
<Button variant="secondary" onClick={handleCancel}>Cancel</Button>

// Dangerous action
<Button variant="danger" onClick={handleDelete}>Delete Account</Button>

// Link styled as button
<Link href="/create" className={button()}>Create New</Link>
<Link href="/cancel" className={button({ variant: 'secondary' })}>Go Back</Link>
```

## Common Anti-Patterns to Avoid

```jsx
// ❌ Bad: Nested interactive elements
<Link href="/dashboard">
  <Button>Go to Dashboard</Button>
</Link>

// ❌ Bad: Button wrapping Link
<Button>
  <Link href="/dashboard">Dashboard</Link>
</Button>

// ❌ Bad: Using styled.button instead of Button component
<styled.button
  px={6}
  py={3}
  bg="blue.600"
  color="white"
>
  Submit
</styled.button>

// ❌ Bad: Manual styling instead of button recipe for Links
<Link href="/dashboard">
  <styled.div
    px={6}
    py={3}
    bg="blue.600"
    color="white"
    borderRadius="lg"
  >
    Dashboard
  </styled.div>
</Link>

// ✅ Good: Correct alternatives
<Link href="/dashboard" className={button()}>
  Dashboard
</Link>

<Button onClick={() => router.push('/dashboard')}>
  Dashboard
</Button>
```

These patterns ensure proper HTML semantics, accessibility, consistent styling, and maintainable code while working with Next.js Link components, the Button component, and modern React 19 form patterns.
