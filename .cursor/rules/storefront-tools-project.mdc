---
description: 
globs: 
alwaysApply: true
---
# Storefront Tools - Project Rules

## Project Overview

Storefront Tools is an AI-powered ecommerce catalog generation platform that creates complete brand identities, product catalogs, images, and marketing materials. The project uses a modern Next.js 15 stack with Vercel AI SDK UI for real-time AI interactions.

**Core Documentation**: 
- [PRD.md](mdc:docs/PRD.md) - Product Requirements Document
- [TECHNICAL_ARCHITECTURE.md](mdc:docs/TECHNICAL_ARCHITECTURE.md) - System Architecture
- [EXECUTION_PLAN.md](mdc:docs/EXECUTION_PLAN.md) - Implementation Plan
- [IMPLEMENTATION_SUMMARY.md](mdc:docs/IMPLEMENTATION_SUMMARY.md) - Current Status

## Technology Stack & Requirements

### Frontend Framework
- **Next.js 15** with App Router (required)
- **TypeScript 5.8+** for all code
- **Plain HTML elements only** - div, p, h1, h2, form, input, button, etc.
- **React Server Components** + client components where needed
- **No styling frameworks** - functionality-only development

### AI Integration (CRITICAL)
- **Vercel AI SDK UI** - Use ONLY client-side hooks, NO server actions
- **OpenAI GPT-4.1** - For all chat and text generation
- **OpenAI GPT-Image-1** - For ALL image generation (NEVER use DALL-E)
- **AI SDK Usage Rules**: Reference [ai-sdk-usage.mdc](mdc:.cursor/rules/ai-sdk-usage.mdc)

### Package Manager
- **ALWAYS use `pnpm`** - Never use npm or yarn
- Reference [package.json](mdc:package.json) for current dependencies

## AI SDK UI Architecture (MANDATORY APPROACH)

### Hook Usage Patterns
```typescript
// Brand Agent - Conversational + Structured Output
const { messages, input, handleSubmit, isLoading } = useChat({
  api: '/api/agents/brand'
})

const { object, submit } = useObject({
  api: '/api/agents/brand',
  schema: BrandSchema
})

// Product Agent - Structured Catalog Generation
const { object, submit, isLoading } = useObject({
  api: '/api/agents/products',
  schema: ProductCatalogSchema
})

// Image Agent - Prompt Completion + Generation
const { completion, submit, isLoading } = useCompletion({
  api: '/api/agents/images'
})
```

### Required API Routes Structure
```
app/api/agents/
‚îú‚îÄ‚îÄ brand/route.ts      - useChat & useObject compatible
‚îú‚îÄ‚îÄ products/route.ts   - useObject compatible
‚îú‚îÄ‚îÄ images/route.ts     - useCompletion compatible
‚îú‚îÄ‚îÄ marketing/route.ts  - useObject & useChat compatible
‚îî‚îÄ‚îÄ export/route.ts     - useCompletion compatible
```

## Five Core AI Agents

### 1. Brand Inventor Agent
- **Purpose**: Create comprehensive brand identities
- **Hooks**: `useChat` + `useObject`
- **API**: `/api/agents/brand`
- **Schema**: `BrandSchema` (see [schemas.ts](mdc:lib/schemas.ts))
- **Output**: Brand name, mission, values, target market, visual identity
- **UI**: Basic HTML forms and text display

### 2. Product Designer Agent  
- **Purpose**: Generate product catalogs with specifications
- **Hooks**: `useObject` primary, `useChat` for refinement
- **API**: `/api/agents/products`  
- **Schema**: `ProductCatalogSchema`
- **Output**: Structured product data with pricing, specs, categories
- **UI**: Plain HTML lists and forms

### 3. Image Generator Agent
- **Purpose**: Create product images using GPT-Image-1
- **Hooks**: `useCompletion` for prompts + custom image generation
- **API**: `/api/agents/images`
- **Model**: OpenAI GPT-Image-1 ONLY (never DALL-E)
- **Output**: Product images with metadata
- **UI**: Basic HTML img elements and forms

### 4. Marketing Designer Agent
- **Purpose**: Build comprehensive design systems
- **Hooks**: `useObject` + `useChat`
- **API**: `/api/agents/marketing`
- **Schema**: `MarketingSystemSchema`
- **Output**: Color palettes, typography, marketing copy
- **UI**: Plain HTML text display and forms

### 5. Catalog Generator Agent
- **Purpose**: Export data for ecommerce platforms
- **Hooks**: `useCompletion` + custom export logic
- **API**: `/api/agents/export`
- **Output**: Shopify CSV, WooCommerce XML, JSON exports
- **UI**: Basic HTML forms and download links

## Component Architecture

### Reusable AI Components
```typescript
// Generic chat interface for any agent
<AgentChat 
  agentType="brand"
  onDataGenerated={handleBrandData}
  initialContext={brandContext}
/>

// Object generation with real-time streaming
<ObjectGenerator
  schema={BrandSchema}
  api="/api/agents/brand"
  prompt="Generate a luxury fashion brand"
  onComplete={handleBrandObject}
/>

// Text completion for prompts and configurations
<CompletionGenerator
  api="/api/agents/export"
  prompt="Configure Shopify export settings"
  onComplete={handleExportConfig}
/>
```

### UI Component Standards
- **Plain HTML Only**: Use only basic HTML elements (div, p, h1, h2, form, input, button, etc.)
- **No CSS Classes**: No styling or CSS classes of any kind
- **Accessibility**: Always include ARIA labels and semantic HTML, keyboard navigation
- **TypeScript**: Strict typing for all props and state
- **Functionality Focus**: Pure functionality without visual concerns

## Data Flow & Storage

### Session-Based Architecture
```
/data/sessions/[sessionId]/
‚îú‚îÄ‚îÄ brand.json           - Brand identity data
‚îú‚îÄ‚îÄ products.json        - Product catalog
‚îú‚îÄ‚îÄ images.json          - Image metadata  
‚îî‚îÄ‚îÄ design-system.json   - Marketing assets

/public/generated-assets/[sessionId]/
‚îú‚îÄ‚îÄ images/              - Generated product images
‚îú‚îÄ‚îÄ exports/             - Platform export files
‚îî‚îÄ‚îÄ temp/                - Temporary processing files
```

### State Management
- **AI State**: Managed automatically by AI SDK UI hooks
- **Local State**: React useState/useReducer for UI state
- **Persistence**: File-based JSON storage via storage utilities
- **Real-time Updates**: Hook callbacks ‚Üí storage ‚Üí UI refresh

## Development Standards

### Code Quality
- **Early Returns**: Use early returns for better readability
- **Descriptive Names**: Use clear variable and function names
- **Event Handlers**: Prefix with "handle" (e.g., `handleSubmit`)
- **Constants**: Prefer `const` over `function` declarations
- **Type Safety**: Always define TypeScript interfaces
- **Plain HTML**: Only use basic HTML elements

### Error Handling
```typescript
// AI SDK UI error handling
const { error, isLoading } = useChat({
  api: '/api/agents/brand',
  onError: (error) => {
    console.error('Brand agent error:', error)
    // Handle error appropriately
  }
})

if (error) {
  return <div>Error: {error.message}</div>
}
```

### Performance Optimization
- **Code Splitting**: Route-based and component-based
- **Lazy Loading**: Images and heavy components
- **Streaming**: Real-time AI responses via hooks
- **Caching**: API responses and generated assets

## File Structure Requirements

### Component Organization
```
components/
‚îú‚îÄ‚îÄ ui/                 - Basic HTML components (Button, Input)
‚îú‚îÄ‚îÄ agents/             - Agent-specific components
‚îÇ   ‚îú‚îÄ‚îÄ brand/
‚îÇ   ‚îú‚îÄ‚îÄ product/
‚îÇ   ‚îú‚îÄ‚îÄ image/
‚îÇ   ‚îú‚îÄ‚îÄ marketing/
‚îÇ   ‚îî‚îÄ‚îÄ export/
‚îú‚îÄ‚îÄ shared/             - Shared components (ChatInterface)
‚îî‚îÄ‚îÄ ai/                 - AI SDK UI wrapper components
```

### API Route Organization
```
app/api/
‚îú‚îÄ‚îÄ agents/             - AI agent endpoints
‚îú‚îÄ‚îÄ storage/            - Data persistence
‚îú‚îÄ‚îÄ files/              - File management
‚îî‚îÄ‚îÄ data/               - Data CRUD operations
```

## Critical Don'ts

### ‚ùå NEVER DO THESE:
1. **Don't use server actions** - Only AI SDK UI hooks
2. **Don't reference DALL-E** - Only GPT-Image-1
3. **Don't use npm/yarn** - Only pnpm
4. **Don't add any styling** - No CSS, no classes, no styling frameworks
5. **Don't create temp files** - Follow established patterns
6. **Don't ignore accessibility** - Always include ARIA support
7. **Don't use styling frameworks** - No PandaCSS, no CSS-in-JS, no design systems

### ‚ùå ANTI-PATTERNS:
- Manual stream parsing (hooks handle this)
- Server-side AI calls (use client hooks)
- Direct OpenAI SDK usage (use AI SDK UI)
- Mixing multiple package managers
- Creating example/demo files unless requested
- Adding any CSS or styling to components
- Using design tokens or styled components

## Implementation Plan Documentation

### üö® CRITICAL WORKFLOW REQUIREMENT
**BEFORE making ANY changes to the codebase:**
1. **MUST consult** [EXECUTION_PLAN.md](mdc:docs/EXECUTION_PLAN.md) to understand current phase and next steps
2. **MUST review** [IMPLEMENTATION_SUMMARY.md](mdc:docs/IMPLEMENTATION_SUMMARY.md) for accurate status
3. **MUST update** implementation docs AFTER completing any feature or phase

**Implementation Plan Documents:**
- **[EXECUTION_PLAN.md](mdc:docs/EXECUTION_PLAN.md)** - Detailed step-by-step implementation guide
- **[IMPLEMENTATION_SUMMARY.md](mdc:docs/IMPLEMENTATION_SUMMARY.md)** - Current status and realistic roadmap
- **[TECHNICAL_ARCHITECTURE.md](mdc:docs/TECHNICAL_ARCHITECTURE.md)** - System design and patterns
- **[PRD.md](mdc:docs/PRD.md)** - Product requirements and vision

## Getting Started

### üîÑ MANDATORY WORKFLOW STEPS
1. **Read Implementation Plan**: ALWAYS start with [EXECUTION_PLAN.md](mdc:docs/EXECUTION_PLAN.md) for current status and next steps
2. **Update After Changes**: MUST update implementation docs after completing any work
3. **Follow Documentation**: Reference [PRD.md](mdc:docs/PRD.md) and [TECHNICAL_ARCHITECTURE.md](mdc:docs/TECHNICAL_ARCHITECTURE.md) for context
4. **Check Status**: Review [IMPLEMENTATION_SUMMARY.md](mdc:docs/IMPLEMENTATION_SUMMARY.md) for accurate progress tracking

### üõ†Ô∏è Development Setup  
- **Use pnpm**: Always `pnpm install`, `pnpm dev`, `pnpm build`
- **Follow AI SDK Rules**: Reference [ai-sdk-usage.mdc](mdc:.cursor/rules/ai-sdk-usage.mdc) for all AI implementations
- **TypeScript Required**: All code must be strictly typed
- **Plain HTML Only**: Use only basic HTML elements, no CSS or styling

Remember: This is an AI-first application using cutting-edge Vercel AI SDK UI patterns with pure functionality focus. Every feature should leverage real-time streaming and structured data generation using only plain HTML elements for the best development velocity.
